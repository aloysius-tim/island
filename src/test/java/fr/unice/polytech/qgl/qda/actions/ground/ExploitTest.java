package fr.unice.polytech.qgl.qda.actions.ground;

import fr.unice.polytech.qgl.qda.Game.Assignment;
import fr.unice.polytech.qgl.qda.Island.*;
import fr.unice.polytech.qgl.qda.actions.Action;
import fr.unice.polytech.qgl.qda.actions.aerial.Scan;
import fr.unice.polytech.qgl.qda.actions.ground.Exploit;
import fr.unice.polytech.qgl.qda.strategy.DronePhase.DroneStrategy;
import fr.unice.polytech.qgl.qda.strategy.GroundPhase.SpecificPattern.FindStrategy;
import org.json.JSONArray;
import org.json.JSONObject;
import org.junit.Test;
import org.junit.Before;
import org.junit.After;

import java.awt.*;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;

import static org.junit.Assert.assertEquals;

public class ExploitTest {

    IslandMap islandMap;
    Assignment assignment;
    HashMap<Ressource, ArrayList<Tile>> tileList;

    @Before
    public void before() throws Exception {
        islandMap=new IslandMap(Direction.E);

        // Creation d'un nouveau contexte : 12 men, 10.000 PA, 600 Wood, 200 Glass, Heading West
        JSONObject context = new JSONObject();
        context.put("men", 12);
        context.put("budget", 10000);

        JSONObject wood = new JSONObject();
        wood.put("amount", 600);
        wood.put("resource", "WOOD");

        JSONObject glass = new JSONObject();
        glass.put("amount", 200);
        glass.put("resource", "GLASS");

        JSONArray ressources = new JSONArray();
        ressources.put(wood);
        ressources.put(glass);

        context.put("contracts", ressources);

        context.put("heading", "W");

        assignment = new Assignment(context);

        tileList = new HashMap<>();

        ArrayList<Tile> QuartzTiles = new ArrayList<>();
        for (int y = 1; y <= 5; y++) {
            for (int x = 1; x <= 5; x++) {
                islandMap.actualizePosition(x, y);
                ArrayList<Biome> quartzbiome = new ArrayList<>();
                quartzbiome.add(Biome.TEMPERATE_DESERT);
                islandMap.scan(quartzbiome, new ArrayList<>());
                QuartzTiles.add(islandMap.createTile(new Point(x, y)));
            }
        }

        ArrayList<Tile> WoodTiles = new ArrayList<>();
        for (int y = 1; y <= 5; y++) {
            for (int x = -1; x >= -5; x--) {
                islandMap.actualizePosition(x, y);
                ArrayList<Biome> woodBiomes = new ArrayList<>();
                woodBiomes.add(Biome.MANGROVE);
                islandMap.scan(woodBiomes, new ArrayList<>());
                WoodTiles.add(islandMap.createTile(new Point(x, y)));
            }
        }

        tileList.put(Ressource.QUARTZ, QuartzTiles);
        tileList.put(Ressource.WOOD, WoodTiles);

        islandMap.actualizePosition(0,0);
    }

    /**
     * Method: buildAction(Ressource ressource)
     */
    @Test
    public void testBuildAction() throws Exception {
        JSONObject jsonObject=Exploit.buildAction(Ressource.FISH);
        assertEquals(jsonObject.getJSONObject("parameters").getString("resource"), "FISH");
    }

    @Test
    public void testFindStategy() throws IllegalAccessException, InstantiationException, InvocationTargetException {
        ArrayList<String> creeks = new ArrayList<>();
        creeks.add("ID");
        islandMap.scan(new ArrayList<>(), creeks);
        FindStrategy strategy1 = new FindStrategy(islandMap, assignment, new LinkedList<JSONObject>(), new LinkedList<Action>(), assignment.getBudget(), tileList);
        strategy1.setCreek(islandMap.getPositionActuelle());
        strategy1.findNearestTile(islandMap.getPositionActuelle());
        strategy1.startMove();
        strategy1.getBufferActions().removeFirst();
        strategy1.getBufferActions().removeFirst();
        strategy1.getBufferActions().removeFirst();

        JSONObject response = new JSONObject();
        response.put("cost", 5);

        JSONObject extras = new JSONObject();
        JSONArray resources = new JSONArray();
        JSONObject explore = new JSONObject();
        explore.put("amount", "HIGH");
        explore.put("resource", "WOOD");
        explore.put("cond", "FAIR");
        resources.put(explore);

        extras.put("resources", resources);
        JSONArray pois = new JSONArray();
        pois.put("ID");
        extras.put("pois", pois);
        response.put("extras", extras);
        response.put("status", "OK");

        strategy1.interpretAcknowledgeResult(response);
        strategy1.interpretAcknowledgeResult(new JSONObject("{ \"cost\": 3, \"extras\": {\"amount\": 9}, \"status\": \"OK\" }"));
    }
} 
